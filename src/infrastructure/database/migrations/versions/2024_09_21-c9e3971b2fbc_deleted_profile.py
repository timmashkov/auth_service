"""deleted_profile

Revision ID: c9e3971b2fbc
Revises: 0ac3725aff2d
Create Date: 2024-09-21 14:37:50.108334

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "c9e3971b2fbc"
down_revision: Union[str, None] = "0ac3725aff2d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("profiles")
    op.alter_column(
        "permissions",
        "layer",
        existing_type=sa.VARCHAR(),
        comment="К чему относится разрешение",
        existing_comment="К чему относится разрешение ('frontend'/'backend'/...)",
        existing_nullable=False,
    )
    op.alter_column(
        "permissions",
        "role_uuid",
        existing_type=sa.UUID(),
        comment="УУИД роли",
        existing_nullable=True,
    )
    op.alter_column(
        "roles",
        "user_uuid",
        existing_type=sa.UUID(),
        comment="УУИД юзера",
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "nickname",
        existing_type=sa.VARCHAR(),
        comment="Никнейм",
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "first_name",
        existing_type=sa.VARCHAR(),
        comment="Имя",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "last_name",
        existing_type=sa.VARCHAR(),
        comment="Фамилия",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "patronymic",
        existing_type=sa.VARCHAR(),
        comment="Отчество",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "age",
        existing_type=sa.INTEGER(),
        comment="Возраст",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "is_verified",
        existing_type=sa.BOOLEAN(),
        comment="Статус подтверждения",
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users",
        "is_verified",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Статус подтверждения",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "age",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Возраст",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "patronymic",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Отчество",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "last_name",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Фамилия",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "first_name",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Имя",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "nickname",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Никнейм",
        existing_nullable=True,
    )
    op.alter_column(
        "roles",
        "user_uuid",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="УУИД юзера",
        existing_nullable=True,
    )
    op.alter_column(
        "permissions",
        "role_uuid",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="УУИД роли",
        existing_nullable=True,
    )
    op.alter_column(
        "permissions",
        "layer",
        existing_type=sa.VARCHAR(),
        comment="К чему относится разрешение ('frontend'/'backend'/...)",
        existing_comment="К чему относится разрешение",
        existing_nullable=False,
    )
    op.create_table(
        "profiles",
        sa.Column("login", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("password", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("age", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "phone_number",
            sa.VARCHAR(length=11),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_uuid", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_uuid"],
            ["users.uuid"],
            name="profiles_user_uuid_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("uuid", name="profiles_pkey"),
        sa.UniqueConstraint("email", name="profiles_email_key"),
        sa.UniqueConstraint("login", name="profiles_login_key"),
        sa.UniqueConstraint("phone_number", name="profiles_phone_number_key"),
        sa.UniqueConstraint("user_uuid", name="profiles_user_uuid_key"),
    )
    # ### end Alembic commands ###
